my_data==NA
sum(my_NA)
sum(my_na)
my_data
0/0
inf/inf
inf-inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)& x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
*list item 3
install.packages("KernSmooth R")
library(KernSmooth R)
library("KernSmooth R")
library("rmarkdown", lib.loc="~/R/win-library/3.1")
library("swirl", lib.loc="~/R/win-library/3.1")
library("KernSmooth", lib.loc="C:/Program Files/R/R-3.1.3/library")
rm(list=ls())
y<-data.frame(a=1,b="a")
dput(y)
dput(y,file="y.R")
new.y<-dget("y.R")
new.y
x<-"foo"
y<-c(1,2)
dump(c("x","y"),file="xy.R")
rm(x,y)
source("xy.R")
x
y
str(dump)
str(dget)
str(file)
cube<-function(x,n){x^n}
cube(3)
cube<-function(x,n){x^3}
cube(2,5)
x<-1:10
if(x>5){
x<-0
}
y<-1:10
y<-0
y
swirl()
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!==7
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE, FALSE)
TRUE && c(TRUE,FALSE, FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical("twins","twins")
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
library(datasets)
data(mtcars)
summary(mtcars)
str(mtcars)
tapply(mtcars$mpg,mycars$cyl,mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
cyl8<-subset(mtcars,mtcars$cyl==8)
str(cyl8)
mean8<-mean(cyl8$mpg)
mean8
hpt<-tapply(mtcars$hp,mtacrs$cyl,mean)
hpt<-tapply(mtcars$hp,mtcars$cyl,mean)
hpt
hpt[3]-hpt[1]
debug(ls)
ls()
exit
q
?debug
q
q
q
q
q
q
q
str(mtcars)
debug(ls)
debug(ls)
ls()
debug(ls)
ls()
set.seed(1)
rpois(5, 2)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
e
y
ploy(y)
plot(y)
plot(x,y)
install.packages("lubridate")
swirl()
library(lubridate)
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/win-library/3.2")
library("lubridate", lib.loc="~/R/win-library/3.2")
install.packages("tidyr")
library("tidyr", lib.loc="~/R/win-library/3.2")
install.packages("swirl")
library("swirl", lib.loc="~/R/win-library/3.2")
library("tidyr", lib.loc="~/R/win-library/3.2")
swirl()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_class,c("sex","class"))
submit()
students3
submit()
?spread()
?spread
submit()
submit()
extract_numeric("class5")
?mutate
submit()
submit()
submit()
submit()
?extract_numeric
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed<-mutate(passed,status="passed")
failed<-mutate(passed,status="failed")
failed<-mutate(failed,status="failed")
bind_rows(passed,failed)
sat
submit()
submit()
?separate
submit()
submit()
?plot
plot(sin,-pi,2*pi)
?par
library(datasets)
hist(airquality$Ozone)
with(airquality,plot(wind,Ozone))
with(airquality,plot(Wind,Ozone))
?transform
str(airquality)
airquality<-transform(airquality,Month=factor(Month))
str(airquality)
boxplot(Ozone~Month)
boxplot(Ozone~Month,airquality)
boxplot(Ozone~Month,airquality,xlab="Month,ylab="Ozone"")
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone"")
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone")
par(bg=3)
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone")
par(bg=1)
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone")
par(bg=2)
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone")
par(bg=999)
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone")
par(bg="transparent")
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone")
par("ch")
with(airquality,plot(wind,Ozone)
)
with(airquality,plot(Wind,Ozone)
)
title(Main="Ozone ans wind in New York City")
title(main="Ozone ans wind in New York City")
title(main="Ozone and wind in New York City")
with(airquality,plot(wind,Ozone),title(main="Ozone ans wind in New York City"))
with(airquality,plot(wind,Ozone),title(main="Ozone ans wind in New York City"))
with(airquality,plot(Wind,Ozone),title(main="Ozone ans wind in New York City"))
with(subset(airquality,Month==5),points(Wind,Ozone,col="blue"))
with(subset(airquality,Month!=5),points(Wind,Ozone,col="red"))
with(airquality,plot(Wind,Ozone),title(main="Ozone ans wind in New York City"),type="n")
with(airquality,plot(Wind,Ozone),
title(main="Ozone ans wind in New York City"),type="n")
with(subset(airquality,Month==5),points(Wind,Ozone,col="blue"))
with(subset(airquality,Month!=5),points(Wind,Ozone,col="red"))
legend("topright",pch=1,col=c("blue","red"),legend=c("May","not May"))
with(airquality,plot(Wind,Ozone),
title(main="Ozone ans wind in New York City"),pch=20)
model<-lm(Ozone~Wind,airquality)
with(airquality,plot(Wind,Ozone),
title(main="Ozone ans wind in New York City"),pch=20)
model<-lm(Ozone~Wind,airquality)
abline(model,lwd=2)
with(airquality,plot(Wind,Ozone),
title(main="Ozone ans wind in New York City"),pch=20)
model<-lm(Ozone~Wind,airquality)
abline(model,lwd=2)
par(mfrow=c(1,2))
with(airquality,{
plot(Wind,Ozone),main="Ozone and wind",
plot(Solar.R,Ozone,main="Ozone and Solar Radiation")
})
par(mfrow=c(1,2))
with(airquality,{
plot(Wind,Ozone),main="Ozone and wind"),
plot(Solar.R,Ozone,main="Ozone and Solar Radiation")
})
par(mfrow=c(1,2))
with(airquality,{
plot(Wind,Ozone,main="Ozone and wind"),
plot(Solar.R,Ozone,main="Ozone and Solar Radiation")
})
par(mfrow=c(1,2))
with(airquality,{
plot(Wind,Ozone,main="Ozone and wind")
plot(Solar.R,Ozone,main="Ozone and Solar Radiation")
})
library(swirl)
swirl()
install.packages("openintro")
library(openintro)
install.packages("ISLR")
email50
head(email50)
str(email50)
str(county)
swirl()
library(swirl)
install_from_swirl("Open Intro")
swirl()
y<-100
cars$type
sqrt(y)
z<-sqrt(y)
?sqrt
cars
10
range(cars$price)
sum(cars$price)
sum(cars$price)/length(cars$price)
mean(cars$price)
mpg.midsize
sort(mpg.midsize)
mpg.sorted<-sort(mpg.midsize)
19
median(mpg.midsize)
summary(cars$mpgCity)
25
1.9
19
17
sd(mpg.midsize)
sd^2
(sd(mpg.midsize)^2)
24000
25000
23000
23500
24
Bayes(3)
source('~/.active-rstudio-document', echo=TRUE)
function Bayes(x){
x+2
}
y<-Bayes(2)
source('C:/Users/Mike/Rspace/JHU_SI/Bayes.R', echo=TRUE)
Baye<-function Bayes(x){
Bayes<-function(x){
x+2
}
y<-Bayes(2)
y
Bayes<-function(sensitivity=1,specificity=1,prevalence=1){
sensitivity*prevalence/
(sensitivity*prevalence+(1-specificity)*(1-prevalence))
}
y<-Bayes()
y
Bayes(1,1,1)
Bayes(0.75,0.52,0.3)
## The Bernoulli distribution
- The **Bernoulli distribution** arises as the result of a binary outcome
- Bernoulli random variables take (only) the values 1 and 0 with probabilities of (say) $p$ and $1-p$ respectively
- The PMF for a Bernoulli random variable $X$ is $$P(X = x) =  p^x (1 - p)^{1 - x}$$
- The mean of a Bernoulli random variable is $p$ and the variance is $p(1 - p)$
- If we let $X$ be a Bernoulli random variable, it is typical to call $X=1$ as a "success" and $X=0$ as a "failure"
---
library(devtools)
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
setwd("C:/Users/RECM/Wind_2089")
setwd("C:/Users/RECM/WE_2089")
setwd("C:/Users/Mike/RECM/WE_2089")
library(slidify)
author("mydeck")
getwd()
slidify("index.Rmd")
slidify("index.Rmd")
publish(user = "mbh038", repo = "RECM", host = 'github')
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.md")
slidify("index.md")
---
title       : The Way to Computational Communication
subtitle    :
author      : Cheng-Jun Wang
job         : Web Mining Web, City University of Hong Kong
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
highlighter : highlight.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow      #
widgets     : []            # {mathjax, quiz, bootstrap}
mode        : standalone # {standalone, draft, selfcontained}
---
## Three metaphors of theory
>Immanuel Kant: All our knowledge begins with the senses, proceeds then to the understanding, and ends with reason. There is nothing higher than reason.
![](http://farm8.staticflickr.com/7379/9532736494_99b95287a2_z.jpg)
--- .class #id
## Sandglass of generalization
![](http://farm8.staticflickr.com/7366/9529954881_53a00fe15b_z.jpg)
---
## Five levels of Research
![](http://farm3.staticflickr.com/2819/9529954801_e6d59c8eba_z.jpg)
---
## Computational Thinking
![](http://farm4.staticflickr.com/3669/9529954763_06a6c95970_z.jpg)
---
## The Way to Computational Communication
![](http://farm6.staticflickr.com/5540/9529954731_4cbf032b06_z.jpg)
---
## Network Science
![](http://farm8.staticflickr.com/7353/9529954585_94686e3aa4_z.jpg)
--- .class1 #id1 bg:yellow
## What should we do?
- Network science
- Statistical linguistics
- Human dynamics
- Big data& digital traces
- Digital media
- Data journalism
- Computational advertising
![](http://gifs.gifbin.com/1236681924_snail_transformers.gif)
---
## Thank you for your attention!
## wangchj04@gmail.com
![](http://farm3.staticflickr.com/2840/9508319890_2cbaa2c4d4_n.jpg)
slidify("index.Rmd")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
install_github('slidify', 'ramnathv')
slidify("index.Rmd")
author("Wind")
slidify("index.Rmd")
install.packages("RCur")
install.packages("RCurl")
library(RCurl)
slidify("index.Rmd")
slidify("index.Rmd")
?norm
??norm
?npois
?dnorm
dnorm(70,80,10)
pnorm(70,80,10)
pnorm(300,80,10)
dnorm(300,80,10)
pnorm(-300,80,10)
pnorm(80,80,10)
?pnorm
plot(pnorm(x,0,1))
pnorm(x=70,mean=80,sd=10)
pnorm(70,mean=80,sd=10)
qnorm(0.95,mean=1100,sd=75)
pnorm(1223.64,mean=1100,sd=75)
?pbinom
pbinom(3,5,0.5)
pbinom(4,5,0.5,lower.tail=FALSE)
pbinom(5,5,0.5)
pbinom(4,5,0.5)
1-pbinom(3,5,0.5)
help(Binomial)
qbinom(60,400,0.2)
pbinom(60,400,0.2)
pbinom(3,5,0.5,lower.tail=FALSE)
pbinom(3,5,0.5,lower.tail=FALSE)
1-pbinom(3,5,0.5)
?ppois
ppois(15,10)
ppois(10,15)
ppois(100,15)
?runif
x<-c(rep(runif(1000,0,1),1000)
)
hist(x)
mean(x)
install_from_swirl("Statistical Inference")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
52
1/13
0
3/13
2/51
1.28
.64
.64
mypdf
integrate(mypdf,0,1.6)
sqrt(2)
n<-0.997*.001
d<-(1-.985)*.999
y<-n(n+d)
y<-n/(n+d)
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
0.58(edh+edl)
0.5*(edh+edl)
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
means(smeans)
mean(smeans)
